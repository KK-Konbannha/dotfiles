-- lspconfig.html.setup({})
-- lspconfig.ts_ls.setup({})
-- lspconfig.eslint.setup({
-- 	on_attach = function(client, bufnr)
-- 		vim.api.nvim_create_autocmd("BufWritePre", {
-- 			buffer = bufnr,
-- 			command = "EslintFixAll",
-- 		})
-- 	end,
-- })
-- lspconfig.jdtls.setup({})
--
-- lspconfig.clangd.setup({
-- 	cmd = {
-- 		"clangd",
-- 		"--offset-encoding=utf-16",
-- 	},
-- })
--
-- lspconfig.lua_ls.setup({
-- 	on_init = function(client)
-- 		local path = client.workspace_folders[1].name
-- 		if not vim.loop.fs_stat(path .. "/.luarc.json") and not vim.loop.fs_stat(path .. "/.luarc.jsonc") then
-- 			client.config.settings = vim.tbl_deep_extend("force", client.config.settings, {
-- 				lua = {
-- 					runtime = {
-- 						version = "LuaJIT",
-- 					},
-- 					workspace = {
-- 						checkThirdParty = false,
-- 						library = {
-- 							vim.env.VIMRUNTIME,
-- 						},
-- 					},
-- 				},
-- 			})
--
-- 			client.notify("workspace/didChangeConfiguration", { settings = client.config.settings })
-- 		end
-- 		return true
-- 	end,
-- })
--
-- lspconfig.gopls.setup({
-- 	settings = {
-- 		gopls = {
-- 			analyses = {
-- 				unusedparams = true,
-- 			},
-- 			staticcheck = true,
-- 			gofumpt = true,
-- 		},
-- 	},
-- 	on_attach = function(client, bufnr)
-- 		vim.api.nvim_create_autocmd("BufWritePre", {
-- 			pattern = "*.go",
-- 			callback = function()
-- 				local params = vim.lsp.util.make_range_params()
-- 				params.context = { only = { "source.organizeImports" } }
-- 				local result = vim.lsp.buf_request_sync(0, "textDocument/codeAction", params)
-- 				for cid, res in pairs(result or {}) do
-- 					for _, r in pairs(res.result or {}) do
-- 						if r.edit then
-- 							local enc = (vim.lsp.get_client_by_id(cid) or {}).offset_encoding or "utf-16"
-- 							vim.lsp.util.apply_workspace_edit(r.edit, enc)
-- 						end
-- 					end
-- 				end
-- 				vim.lsp.buf.format({ async = false })
-- 			end,
-- 		})
-- 	end,
-- })
--
-- lspconfig.rust_analyzer.setup({
-- 	on_attach = function(client, bufnr)
-- 		vim.api.nvim_create_autocmd("BufWritePre", {
-- 			pattern = "*.rs",
-- 			callback = function()
-- 				vim.lsp.buf.format({ async == true })
-- 			end,
-- 		})
-- 	end,
-- 	settings = {
-- 		["rust-analyzer"] = {
-- 			checkOnSave = {
-- 				command = "clippy",
-- 			},
-- 			imports = {
-- 				granlurity = {
-- 					group = "module",
-- 				},
-- 				prefix = "self",
-- 			},
-- 			cargo = {
-- 				buildScripts = {
-- 					enable = true,
-- 				},
-- 			},
-- 			procMacro = {
-- 				enable = true,
-- 			},
-- 		},
-- 	},
-- })
